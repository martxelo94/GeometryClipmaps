#version 420
 
// PN patch data
struct PNData
{
    float b210;
    float b120;
    float b021;
    float b012;
    float b102;
    float b201;
    float b111;
	float n110;
	float n011;
	float n101;
};
 
 uniform mat4 MVP;
 uniform mat4 MV;

uniform float uTessAlpha;
 
layout(triangles, fractional_odd_spacing, ccw) in;
 
layout(location = 0) in vec3 Normal_tcs[];
layout(location = 3) in vec2 TexCoord[];
layout(location = 6) in PNData PatchData[];

layout(location = 0) out vec3 position;
layout(location = 1) out vec3 normal;
layout(location = 2) out vec2 uv;
 
void main()
{
    vec3 b300  = gl_in[0].gl_Position.xyz;
    vec3 b030  = gl_in[1].gl_Position.xyz;
    vec3 b003  = gl_in[2].gl_Position.xyz;
    
	vec3 n200 = Normal_tcs[0];
	vec3 n020 = Normal_tcs[1];
	vec3 n002 = Normal_tcs[2];

    vec3 uvw = gl_TessCoord;
	vec3 uvwSquared = uvw * uvw;
	vec3 uvwCubed = uvwSquared * uvw;

	// extract control points
	vec3 b210 = vec3(PatchData[0].b210, PatchData[1].b210, PatchData[2].b210);
	vec3 b120 = vec3(PatchData[0].b120, PatchData[1].b120, PatchData[2].b120);
	vec3 b021 = vec3(PatchData[0].b021, PatchData[1].b021, PatchData[2].b021);
	vec3 b012 = vec3(PatchData[0].b012, PatchData[1].b012, PatchData[2].b012);
	vec3 b102 = vec3(PatchData[0].b102, PatchData[1].b102, PatchData[2].b102);
	vec3 b201 = vec3(PatchData[0].b201, PatchData[1].b201, PatchData[2].b201);
	vec3 b111 = vec3(PatchData[0].b111, PatchData[1].b111, PatchData[2].b111);

	// extract control normals
	vec3 n110 = normalize(vec3(PatchData[0].n110, PatchData[1].n110, PatchData[2].n110));
	vec3 n011 = normalize(vec3(PatchData[0].n011, PatchData[1].n011, PatchData[2].n011));
	vec3 n101 = normalize(vec3(PatchData[0].n101, PatchData[1].n101, PatchData[2].n101));

	// compute texcoords
	uv = uvw[2] * TexCoord[0] + uvw[0] * TexCoord[1] + uvw[1] * TexCoord[2];

	// normal
	vec3 barNormal = uvw[2] * Normal_tcs[0] + uvw[0] * Normal_tcs[1] + uvw[1] * Normal_tcs[2];
	vec3 pnNormal = n200 * uvwSquared[2]
				+ n020 * uvwSquared[0]
				+ n002 * uvwSquared[1]
				+ n110 * uvw[2] * uvw[0]
				+ n011 * uvw[0] * uvw[1]
				+ n101 * uvw[2] * uvw[1];

	normal = uTessAlpha * pnNormal + (1.0 - uTessAlpha) * barNormal;

	// compute interpolated pos
	vec3 barPos = uvw[2] * b300
			+ uvw[0] * b030
			+ uvw[1] * b003;

	// save some computations
	uvwSquared *= 3.0;

	// compute PN position
	vec3 pnPos = b300 * uvwCubed[2]
			+ b030 * uvwCubed[0]
			+ b003 * uvwCubed[1]
			+ b210 * uvwSquared[2] * uvw[0]
			+ b120 * uvwSquared[0] * uvw[2]
			+ b201 * uvwSquared[2] * uvw[1]
			+ b012 * uvwSquared[0] * uvw[1]
			+ b102 * uvwSquared[1] * uvw[2]
			+ b012 * uvwSquared[1] * uvw[0]
			+ b111 * 6.0 * uvw[0] * uvw[1] * uvw[2];

	// final position and normal
	vec3 finalPos = (1.0 - uTessAlpha) * barPos + uTessAlpha * pnPos;
	gl_Position = MVP * vec4(finalPos, 1.0);
	position = vec3(MV * vec4(finalPos, 1.0));
}