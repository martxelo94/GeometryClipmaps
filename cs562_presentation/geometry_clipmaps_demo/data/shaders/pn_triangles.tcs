#version 420
 
// PN patch data
struct PNData
{
    float b210;
    float b120;
    float b021;
    float b012;
    float b102;
    float b201;
    float b111;
	float n110;
	float n011;
	float n101;
};
 
// tessellation levels
uniform float uTessLevels;
 
layout(vertices=3) out;
 
layout(location = 0) in vec3 position[];
layout(location = 1) in vec3 normal[];
layout(location = 2) in vec2 uv[];

layout(location = 0) out vec3 Normal_tcs[3];
layout(location = 3) out vec2 TexCoord[3];
layout(location = 6) out PNData PatchData[3];

uniform mat4 MV;

float wij(int i, int j)
{
	return dot(gl_in[j].gl_Position.xyz - gl_in[i].gl_Position.xyz, normal[i]);
}
float vij(int i, int j)
{
	vec3 Pj_minus_Pi = gl_in[j].gl_Position.xyz - gl_in[i].gl_Position.xyz;
	vec3 Ni_plus_Nj = normal[i] + normal[j];
	return 2.0 * dot(Pj_minus_Pi, Ni_plus_Nj) / dot(Pj_minus_Pi, Pj_minus_Pi);
}
 
void main()
{
    // get data
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
    Normal_tcs[gl_InvocationID] = normal[gl_InvocationID];
	TexCoord[gl_InvocationID] = uv[gl_InvocationID];

#if 0
	// check if triangle has to be tesselated, based on normal angle
	vec3 tri_center = vec4(gl_in[0].gl_Position + gl_in[1].gl_Position + gl_in[2].gl_Position).xyz;
	tri_center /= 3;
	tri_center = vec4(MV * vec4(tri_center, 1)).xyz;
	
	vec3 view = normalize(tri_center);
	
	vec3 _normal = cross(vec4(gl_in[2].gl_Position - gl_in[0].gl_Position).xyz,
						vec4(gl_in[1].gl_Position - gl_in[0].gl_Position).xyz);
	_normal = transpose(inverse(mat3(MV))) * _normal;
	_normal = normalize(_normal);
	
	float angle_dot = dot(view, _normal);
	if(angle_dot > 0 && angle_dot < 0.5){
		gl_TessLevelOuter[gl_InvocationID] = uTessLevels * 5;
		gl_TessLevelInner[0] = uTessLevels * 5;
		return;
	}
#endif

	// set base
	float P0 = gl_in[0].gl_Position[gl_InvocationID];
	float P1 = gl_in[1].gl_Position[gl_InvocationID];
	float P2 = gl_in[2].gl_Position[gl_InvocationID];
	float N0 = normal[0][gl_InvocationID];
	float N1 = normal[1][gl_InvocationID];
	float N2 = normal[2][gl_InvocationID];

	// compute control points
	PatchData[gl_InvocationID].b210 = (2.0 * P0 + P1 - wij(0, 1) * N0) / 3.0;
	PatchData[gl_InvocationID].b120 = (2.0 * P1 + P0 - wij(1, 0) * N1) / 3.0;
	PatchData[gl_InvocationID].b021 = (2.0 * P1 + P2 - wij(1, 2) * N1) / 3.0;
	PatchData[gl_InvocationID].b012 = (2.0 * P2 + P1 - wij(2, 1) * N2) / 3.0;
	PatchData[gl_InvocationID].b102 = (2.0 * P2 + P0 - wij(2, 0) * N2) / 3.0;
	PatchData[gl_InvocationID].b201 = (2.0 * P0 + P2 - wij(0, 2) * N0) / 3.0;

	float E = (PatchData[gl_InvocationID].b210 + PatchData[gl_InvocationID].b120 + PatchData[gl_InvocationID].b021
	+ PatchData[gl_InvocationID].b012 +PatchData[gl_InvocationID].b102 + PatchData[gl_InvocationID].b201) 
	/ 6.0;

	float V = (P0 + P1 + P2) / 3.0;
	PatchData[gl_InvocationID].b111 = E + (E - V) * 0.5;
	PatchData[gl_InvocationID].n110 = N0 + N1 - vij(0, 1) * (P1 - P0);
	PatchData[gl_InvocationID].n011 = N1 + N2 - vij(1, 2) * (P2 - P1);
	PatchData[gl_InvocationID].n101 = N2 + N0 - vij(2, 0) * (P0 - P2);

    // set tess levels
    gl_TessLevelOuter[gl_InvocationID] = uTessLevels;
    gl_TessLevelInner[0] = uTessLevels;
	

	
}